import sys
import time
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QHBoxLayout, QVBoxLayout, QLabel, 
    QPushButton, QWidget, QMessageBox
)
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import QTimer, Qt
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="taxi_logs.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

class Taximetro(QMainWindow):
    def __init__(self):
        super().__init__()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setWindowTitle("Tax√≠metro digital *** Factoria F5")
        self.setGeometry(300, 300, 600, 400)

        self.setStyleSheet("background-color: #FFFFFF;")

        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_layout = QHBoxLayout()

        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
        logo_layout = QVBoxLayout()
        image_label = QLabel(self)
        image_label.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
        main_layout.addWidget(image_label, 0, Qt.AlignVCenter)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø
        try:
            pixmap = QPixmap("taxi.jpeg")
            if not pixmap.isNull():
                scaled_pixmap = pixmap.scaled(
                    400, 300,  # –†–∞–∑–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞
                    Qt.KeepAspectRatio, 
                    Qt.SmoothTransformation
                )
                image_label.setPixmap(scaled_pixmap)
                
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        logo_layout.addWidget(image_label)

        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        buttons_layout = QVBoxLayout()

        # –ú–µ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.label_estado = QLabel("Estado: Parado")
        self.label_estado.setStyleSheet("font-size: 16px;")
        buttons_layout.addWidget(self.label_estado)

        # –ú–µ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        self.label_total = QLabel("Total: 0.00 ‚Ç¨")
        self.label_total.setStyleSheet("font-size: 18px;")
        buttons_layout.addWidget(self.label_total)

        # –ö–Ω–æ–ø–∫–∏
        buttons = [
            ("Iniciar Trayecto", self.iniciar_trayecto),
            ("Mover", lambda: self.cambiar_estado("moviendo")),
            ("Parar", lambda: self.cambiar_estado("parado")),
            ("Finalizar Trayecto", self.finalizar_trayecto)
        ]

        for text, handler in buttons:
            btn = QPushButton(text)
            btn.clicked.connect(handler)
            buttons_layout.addWidget(btn)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ layouts –≤ –≥–ª–∞–≤–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout
        main_layout.addLayout(logo_layout)
        main_layout.addLayout(buttons_layout)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        central_widget = QWidget()
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.tarifa_parado = 0.02
        self.tarifa_movimiento = 0.05
        self.total = 0
        self.estado = "parado"
        self.tiempo_inicio = None

        # –¢–∞–π–º–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        self.timer = QTimer()
        self.timer.timeout.connect(self.actualizar_costo)

    def iniciar_trayecto(self):
        #–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.

        self.total = 0
        self.estado = "parado"
        self.tiempo_inicio = time.time()
        self.timer.start(1000)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 1 —Å–µ–∫
        self.label_estado.setText("Estado: Parado")
        self.label_total.setText("Total: 0.00 ‚Ç¨")
        logging.info("üöñ Nuevo trayecto iniciado.")
        QMessageBox.information(self, "Inicio", "¬°Trayecto iniciado!")


    def cambiar_estado(self, nuevo_estado):
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–≤–∏–∂–µ—Ç—Å—è –∏–ª–∏ —Å—Ç–æ–∏—Ç).
        """
        if self.tiempo_inicio is None:
            QMessageBox.warning(self, "Advertencia", "Primero inicie un trayecto.")
            return

        self.estado = nuevo_estado
        self.label_estado.setText(f"Estado: {'Moviendo' if nuevo_estado == 'moviendo' else 'Parado'}")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if nuevo_estado == "moviendo":
            logging.info("El taxi ha comenzado a moverse.")
        elif nuevo_estado == "parado":
            logging.info("El taxi se ha detenido.")

    def finalizar_trayecto(self):
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞.
        """
        if self.tiempo_inicio is None:
            QMessageBox.warning(self, "Advertencia", "Primero inicie un trayecto.")
            return

        self.timer.stop()
        QMessageBox.information(self, "Fin", f"Trayecto finalizado. Total a pagar: {self.total:.2f} ‚Ç¨")
        logging.info(f"Trayecto finalizado. Total: {self.total:.2f} ‚Ç¨")
        self.total = 0
        self.estado = "parado"
        self.tiempo_inicio = None
        self.label_estado.setText("Estado: Parado")
        self.label_total.setText("Total: 0.00 ‚Ç¨")

    def actualizar_costo(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
        """
        tiempo_actual = time.time()
        tiempo_transcurrido = tiempo_actual - self.tiempo_inicio

        if self.estado == "parado":
            self.total += self.tarifa_parado
        elif self.estado == "moviendo":
            self.total += self.tarifa_movimiento

        self.label_total.setText(f"Total: {self.total:.2f} ‚Ç¨")
        self.tiempo_inicio = tiempo_actual

def main():
    app = QApplication(sys.argv)
    taximetro = Taximetro()
    taximetro.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()